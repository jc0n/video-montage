#!/usr/bin/env python

import argparse
import logging

from VideoMontager import VideoMontager, __version__, __author__

logger = logging.getLogger(VideoMontager.__name__)
logger.addHandler(logging.StreamHandler())

def parse_args():
    parser = argparse.ArgumentParser(
        description="Create a montage of frames from video files.")

    parser.add_argument('--background-color', '-bg', default='black', metavar='COLOR',
            help='Background color for the montage.')

    parser.add_argument('--debug', default=False, action='store_true',
            help="Enable debug output")

    parser.add_argument('--format', '-F', default='jpg',
            choices=('png', 'gif', 'jpg'),
            help='Output image format for montage image.')

    parser.add_argument('--ffmpeg-args', default='',
            help='Additional arguments to pass to ffmpeg when creating thumbnails.')

    parser.add_argument('--include-timestamps', action='store_true', default=True,
            help="Include timestamps for each frame thumbnail.")

    parser.add_argument('--label-color', '-fg', default='white', metavar='COLOR',
            help='Font color for the label placed at the top of the montage image.')

    parser.add_argument('--montage-args', '-m', default='',
            help="Additional arguments to pass to ImageMagick montage.")

    parser.add_argument('--outdir', '-d', metavar='PATH', default=None,
            help='Output directory for montage images. Defaults to the same '
                 'directory as the input video file.')

    parser.add_argument('--overwrite', '-f', default=False, action='store_true',
            help='Overwrite output image files if they already exist.')

    parser.add_argument('--progress', '-p', default=False, action='store_true',
            help="Show progress while creating thumbnails (as it can take a while).")

    parser.add_argument('--quiet', '-q', default=False, action='store_true',
            help="Silent operation.")

    parser.add_argument('--recursive', '-R', default=False, action='store_true',
            help='Process all video files within directories recursively.')

    parser.add_argument('--start-seconds', '-ss', metavar='N', default=120, type=int,
            help='Start recording video frames at an offset in seconds.')

    parser.add_argument('--tile', '-t', metavar="MxN", default=None,
            help="Dimensions for tiling the thumbnails ex. 2x2")

    parser.add_argument('--thumbnail-count', '-n', metavar='N', default=25, type=int,
            help='Number of thumbnails to include.')

    parser.add_argument('--resolution', '-r', metavar='N', default='2560x1600', type=str,
            help='Size of individual thumbnails. ex. 1920x1080')

    parser.add_argument('--verbose', '-v', default=False, action='store_true',
            help="Show more verbose output.")

    parser.add_argument('--version', '-V', default=False, action='store_true',
            help="Print version number and exit.")

    parser.add_argument('video_files', metavar='video_file', nargs='*',
            help='List of video files to process.')

    args = parser.parse_args()
    if args and args.version:
        print 'video-montage version %s by %s' % (__version__, __author__)
        raise SystemExit(0)
    if not args or not args.video_files:
        parser.print_help()
        raise SystemExit(1)
    if args.verbose:
        logger.setLevel(logging.INFO)
    if args.quiet:
        logger.setLevel(logging.CRITICAL)
    if args.debug:
        logger.setLevel(logging.DEBUG)

    return args

if __name__ == '__main__':
    args = parse_args()
    m = VideoMontager(**vars(args))
    m.process_videos()

